var GenericGame = require('games/GenericGame');

class RedLightGreenLight extends GenericGame{
    constructor(){
        super();
        this.isActive = true;
        this.timeElapsed = 0;
        this.nextEvent = 999;
        this.stopDuration = 1;
        this.isRedLight = true;
    }

    get STEPS_NEEDED(){
        return 50;
    }
    get MIN_SECONDS(){
        return 1.5;
    }
    get MAX_SECONDS(){
        return 4;
    }

    setupGameHandlers(socket, io){
        super.setupGameHandlers(socket, io);

        socket.on('move', () => {
            let player = this.playerManager.getPlayerBySocketID(socket.id);

            if(this.isRedLight){
                socket.emit('out');
            } else {
                player.gameStateObject.steps++;
            }

        });
    }

    start(){
        super.start();
        this.addGameStateObjectProperty('steps', 0);

        this.nextEvent = this.getRandTime(this.MAX_SECONDS,this.MIN_SECONDS);
    }

    update(){
        super.update();

        if(this.isActive){
            this.operateLights();
            this.checkSteps();       
        }
        
    }

    checkSteps(){
        for(let i = 0; i < this.playerManager.players.length; i++){
            let player = this.playerManager.player[i];
            if(player.gameStateObject.steps >= this.STEPS_NEEDED){
                this.isActive = false;
                this.io.in(this.roomCodeReference).emit('end');
                this.stopGameInstance();
                break;
            }
        }
    }

    operateLights(){
        this.timeElapsed += this.gameLoop.deltaTime;
        if(this.isRedLight){
            if(this.timeElapsed >= this.stopDuration){
                this.timeElapsed = 0;
                this.nextEvent = this.getRandTime(this.MAX_SECONDS, this.MIN_SECONDS);
                this.isRedLight = false;
                this.io.in(this.roomCodeReference).emit('green');
            }
        } else {
            if(this.timeElapsed >= this.nextEvent){
                this.timeElapsed = 0;
                this.isRedLight = true;
                this.io.in(this.roomCodeReference).emit('red');
            }
        }
        
        if(this.timeElapsed >= this.nextEvent){
            showRedLight();
            this.timeElapsed = 0;
            this.nextEvent = this.getRandTime(this.MAX_SECONDS,this.MIN_SECONDS);
        }
    }

    showRedLight(){
        
    }

    getRandTime(max, min){
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }
}
module.exports = RedLightGreenLight;