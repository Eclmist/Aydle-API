function PassTheBombServer()
{
   
}


PassTheBombServer.Init = function(io,socket)
{
    socket.on('explode', function(data)
    {
        console.log('explooooossionnnnnnnnnnnnnnn');
    });

    socket.on('passBomb', function(secondsLeft)
    {
        // ask the next player to generate question
        io.sockets.connected[socket.currentRoom.GetNextTarget().playerID].emit('getBomb',secondsLeft);
    });


    // for now lets use this to check if all players have connected
    socket.on('present',function(data)
    {
        // will need to implement an abstract method for this later on
        let room = socket.currentRoom;
        let host = room.GetHost();

        host.connectedPlayers++;
        if(room.players.length === host.connectedPlayers)
        {
            console.log('we can start now');
            io.sockets.connected[host.playerID].emit('displayStartOption');
        }

        /*
        socket.emit('getPlayerCountForGame',socket.currentRoom.games[socket.currentRoom.games.length-1]
        ,CheckGameStatus);

        // callback function
        function CheckGameStatus(playerCount)
        {
            // display the option to start when minimum required players is met
            if(socket.currentRoom.players.length === playerCount)
            {
                console.log('we can start now');
                io.sockets.connected[socket.currentRoom.GetHost().playerID].emit('displayStartOption');
            }
                
        }
        */
        
    });

    socket.on('startGame',function()
    {
        io.sockets.connected[socket.currentRoom.GetCurrentTarget().playerID].emit('getBomb',30);

    });

    socket.on('gameOver',function()
    {
        let players = socket.currentRoom.players;

        for(let i = 0; i<players.length; i++)
        {
            if(players[i].playerID != socket.id)
                players[i].score += 100;


            console.log(players[i].score);
        }
    });

    

    

    



}


module.exports = PassTheBombServer;


