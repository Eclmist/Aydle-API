class GameManager{
    constructor(){
        this.io = undefined;
        this.cp = require('child_process');
        this.gameList = require('games/games.json');
    }

    get GAME_PATH(){
        return 'node_modules/games/';
    }
    get GAME_PROCESS_PATH(){
        return 'node_modules/server/GameProcess.js';
    }

    initHandlers(socket, io){
        
        if(io !== undefined){
            this.io = io;
        }

        if(socket !== undefined){

            socket.on('startGame', (gameID) => {
                this.startGameInstance(socket, gameID);
            });
        }

    }

    startGameInstance(socket, gameID){
        let game = this.getGameInfo(gameID);
        let moduleName;

        if(game !== undefined){
            moduleName = game.moduleName;
            let gameProcess = this.cp.fork(this.GAME_PROCESS_PATH);
            gameProcess.send({name:moduleName});

            let users = socket.currentRoom.users;
            this.sendAllUserInfoToGame(users);
            this.notifyGameToAll(socket.currentRoom.code, gameID, moduleName);

            gameProcess.send({canStart : true});
            socket.currentRoom.currentGame = gameProcess;
            this.handleGameProcessCallbacks(gameProcess);
        }
    }

    notifyGameToAll(roomCode, gameID, moduleName){
        this.io.in(roomCode).emit('onStartGame', {
            routeName: moduleName,
            id: gameID,
            assets: this.getGameAssets(gameID)
        })
    }

    sendAllUserInfoToGame(gameProcess, users){
        for(let i = 0; i < users.length; i++){
            // get the socket object of the player
            let socketObj = this.io.sockets.connected[users[i].socketID];
            let data = {
                socket : socketObj,
                io : io,
                playerID : users[i].userID
            }
            gameProcess.send(data); 
        }
    }

    handleGameProcessCallbacks(gameProcess){
        // add post-game scores
        gameProcess.on('message',(playerPack) => {
            if(playerPack !== undefined){
                for(let i = 0; i < playerPack.length; i++){
                    let socketObj = this.io.sockets.connected[playerPack[i].socketID];
                    if(socketObj !== undefined){
                        let user = socketObj.currentRoom.getUserBySocketID(socketObj.id);
                        user.score += playerPack[i].score;
                    }
                }
            }
        });

        gameProcess.on('exit',() => {
            console.log('game ended');
        });
    }

    getGameInfo(gameID){
        for(let i = 0; i < this.gameList.length; i++){
            if(gameID === this.gameList[i].gameID){
                return this.gameList[i];
            }
        }
        return undefined;
    }

    getGameAssets(gameID){
        let game = this.getGameInfo(gameID);
        let gameAssets;
        if(game !== undefined){
            gameAssets = game.assets;
        }

        return gameAssets;
    }
}
module.exports = GameManager;
