function GameUtils(){}

const cp = require('child_process');
const GAME_PATH = 'node_modules/games/';
const GAME_PROCESS_PATH = 'node_modules/server/GameProcess.js';
let gameList = require('games/games.json');


GameUtils.GetGameList = function()
{
    return gameList;
}

GameUtils.StartGameInstance = function(gameID,socket,io)
{
    let game = GetGameInfo(gameID);
    let moduleName;

    if(game !== undefined)
    {
        moduleName = game.moduleName;
    
        if(socket !== undefined && io !== undefined)
        {
            let gameProcess = cp.fork(GAME_PROCESS_PATH);
            // tell the process what game to load
            gameProcess.send({name:moduleName});
            /*
            let players = socket.currentRoom.players;
            
            // set up socket handlers for every player
            for(let i = 0; i < players.length; i++)
            {
                // get the socket object of the player
                let socketObj = io.sockets.connected[players[i].socketID];
                let data = {
                    socket : socketObj,
                    io : io,
                    playerID : players[i].playerID
                }
                gameProcess.send(data); 
            }

            io.in(socket.currentRoom.code).emit('onStartGame', {
                routeName: moduleName,
                id: gameID,
                assets: GetGameAssets(gameID)
            })
            */
            gameProcess.send({canStart : true});
            //socket.currentRoom.currentGame = gameProcess;

            // REMEMBER TO UNCOMMENT ^^^^^^^^^^

            // post-game scores
            gameProcess.on('message',(playerPack) => {
                if(playerPack !== undefined){
                    for(let i = 0; i < playerPack.length; i++){
                        for(let j = 0; j < players.length; j++){
                            if(players[j].socketID === playerPack[i].socketID){
                                players[j].score += playerPack[i].score;
                            }
                        }
                    }
                }
            });

            gameProcess.on('exit',() => {
                console.log('game ended');
            });
        }
    }
}

function GetGameInfo(gameID)
{
    for(let i = 0; i < gameList.length; i++)
    {
        if(gameID === gameList[i].gameID)
        {
            return gameList[i];
        }
    }

    return undefined;
}

function GetGameAssets()
{
    let gameInfo = GetGameInfo();
    
    if(gameInfo !== undefined)
    {
        return gameInfo.assets;
    }
}

module.exports = GameUtils;