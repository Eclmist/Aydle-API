var Room = require('server/Room');
var User = require('server/User');

// **** This class handles some socket responsibilities ****
class RoomManager{
    constructor(io){
        this.io = io;
        this.gamerooms = {};
    }

    getRoom(roomCode){
        let room = this.gamerooms[roomCode];
        return room;
    }

    createRoom(roomCode){
        let room = new Room(roomCode);
        gamerooms[roomCode] = room;
        
        return room;
    }

    joinRoom(roomCode, socketObj, userID, successCallback){
        let room = this.getRoom(roomCode);
        if(room !== undefined){
            socketObj.leaveAll();
            socketObj.join(roomCode);

            let oldPlayer = room.getUserByUserID(userID);
            if(oldPlayer !== undefined){
                let replacement = Object.assign({socketID:1,isAway:false},oldPlayer);
                replacement.isAway = false;
                replacement.socketID = socketObj.id;
                room.addUser(replacement);

                let oldSocket = this.io.sockets.connected[oldPlayer.socketID];
                if(oldSocket !== undefined){
                    oldSocket.disconnect();
                }

                room.removeUser(oldPlayer);
                successCallback(oldPlayer.name);
            } else {
                let user = new User(this.io, socketObj.id, userID, 0, '', false);
                room.addUser(user);
                successCallback('');
            }


            socketObj.currentRoom = room;

        }
    }

    UpdateLobby(socketObj){
        
    }


    
    onDisconnect(socketID){
        Object.keys(gamerooms).forEach((code) => {
            gamerooms[code].onDisconnect(socketID);
        });
    }


}
module.exports = RoomManager;