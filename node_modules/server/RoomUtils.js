function RoomUtils(){}


// Creates a game room that provides suppport for adding and removing of players
RoomUtils.CreateRoom = function(roomCode)
{
    let _name = '';
    let _code = roomCode;
    let _players = [];
    let _games = [];
    let _targetIndex = 0;
    let _isPlaying = false;

    let createdRoom =
    {
        name : _name,
        code : _code,
        players : _players,
        games : _games,
        targetIndex : _targetIndex,
        isPlaying : _isPlaying,
        AddPlayer : function(socketID,playerID)
        {
            let p = CreatePlayer(socketID,playerID);
            _players.push(p);

            return p;
        },
        RemovePlayer : function(socketID)
        {
            let index = -1;

            for(let i = 0; i < _players.length; i++)
            {
                if(_players[i].socketID === socketID)
                {
                    index = i;
                    break;
                }
            }

            if(index !== -1)
            {
                _players.splice(index,1);
                this.AppointNewHost();
            }
            
        },
        AppointNewHost : function ()
        {
            if(this.GetHost() === undefined)
            {
                for(let i = 0; i < _players.length; i++)
                {
                    // assign the first person that is not away to be host
                    if(!_players[i].isAway)
                    {
                        this.players[i].isHost = true;
                        break;
                    }
                }
            }
        },
        GetCurrentTarget : function()
        {
            return _players[_targetIndex];
                
        },
        GetNextTarget : function()
        {
            if(_players.length > 0)
            {
                    
                // reset the target back to the first user if target index is out of bounds
                if((_targetIndex + 1) >= _players.length)
                {
                    _targetIndex = 0;
                }
                else
                {
                    _targetIndex++;
                }


                if(!_players[_targetIndex].isAway)
                {
                    return _players[_targetIndex];
                }
                else
                {
                    return this.GetNextTarget();
                }
                    
                

            }
        },
        GetPlayerByPlayerID: function(playerID)
        {
            for(let i = 0; i < _players.length; i++)
            {
                 if(_players[i].playerID === playerID)
                 {
                     return _players[i];
                 }
            }
 
            return undefined;
        },
        GetPlayerBySocketID : function(socketID)
        {
           for(let i = 0; i < _players.length; i++)
           {
                if(_players[i].socketID === socketID)
                {
                    return _players[i];
                }
           }

           return undefined;
        },
        GetHost : function()
        {
            for(let i = 0; i < _players.length; i++)
            {
                if(_players[i].isHost)
                    return _players[i];
            }
        },
        MakeNameUnique : function(name,counter)
        {
            let count = counter;
            let originalName = name
            let pendingName;
            let exist = false;
            
                if( count !== 0)
                    pendingName = name + " - " + count;
                else
                    pendingName = name;

            for(let i = 0; i <_players.length; i++)
            {

                if(pendingName === _players[i].name)
                {
                    exist = true;
                    break;
                }
            }

            if(exist === true)
            {
                count++;
                return this.MakeNameUnique(originalName,count);
            }
            else
            {
                if(count !== 0)
                    return  pendingName;
                else
                    return originalName;
            }   
        },
        OnDisconnecting : function (socketID) 
        {
            let player = this.GetPlayerBySocketID(socketID);

            if(player !== undefined)
            {
                player.isAway = true;
                
                if(player.isHost)
                {
                    player.isHost = false;
                    this.AppointNewHost();
                }
            }
            
        }

    }

    return createdRoom;

}

function CreatePlayer(socketID,playerID)
{
    let createdPlayer =
    {
        playerID : playerID,
        socketID : socketID,
        score : 0,
        isHost : false,
        name : "",
        connectedPlayers: 0,
        isInitialized : false,
        isAway : false
        
    }

    return createdPlayer;
}



module.exports = RoomUtils;